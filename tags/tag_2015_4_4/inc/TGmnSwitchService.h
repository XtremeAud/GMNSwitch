/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TGmnSwitchService_H
#define TGmnSwitchService_H

#include <thrift/TDispatchProcessor.h>
#include "GmnSwitch_types.h"

namespace gmnswitch {

class TGmnSwitchServiceIf {
 public:
  virtual ~TGmnSwitchServiceIf() {}

  /**
   * Send the TPacket to Switch
   * 
   * @param tPacket
   */
  virtual void Send(const TPacket& tPacket) = 0;

  /**
   * Add TNamespace
   * 
   * @param tNamespace
   */
  virtual void AddNamespace(const TNamespace& tNamespace) = 0;

  /**
   * Update TNamespace
   * 
   * @param tNamespaceList
   */
  virtual void UpdateNamespace(const std::vector<TNamespace> & tNamespaceList) = 0;

  /**
   * Get a list of TNamespace
   */
  virtual void ListNamespace(std::vector<TNamespace> & _return) = 0;
};

class TGmnSwitchServiceIfFactory {
 public:
  typedef TGmnSwitchServiceIf Handler;

  virtual ~TGmnSwitchServiceIfFactory() {}

  virtual TGmnSwitchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TGmnSwitchServiceIf* /* handler */) = 0;
};

class TGmnSwitchServiceIfSingletonFactory : virtual public TGmnSwitchServiceIfFactory {
 public:
  TGmnSwitchServiceIfSingletonFactory(const boost::shared_ptr<TGmnSwitchServiceIf>& iface) : iface_(iface) {}
  virtual ~TGmnSwitchServiceIfSingletonFactory() {}

  virtual TGmnSwitchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TGmnSwitchServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TGmnSwitchServiceIf> iface_;
};

class TGmnSwitchServiceNull : virtual public TGmnSwitchServiceIf {
 public:
  virtual ~TGmnSwitchServiceNull() {}
  void Send(const TPacket& /* tPacket */) {
    return;
  }
  void AddNamespace(const TNamespace& /* tNamespace */) {
    return;
  }
  void UpdateNamespace(const std::vector<TNamespace> & /* tNamespaceList */) {
    return;
  }
  void ListNamespace(std::vector<TNamespace> & /* _return */) {
    return;
  }
};


class TGmnSwitchService_Send_args {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};

  TGmnSwitchService_Send_args(const TGmnSwitchService_Send_args&);
  TGmnSwitchService_Send_args& operator=(const TGmnSwitchService_Send_args&);
  TGmnSwitchService_Send_args() {
  }

  virtual ~TGmnSwitchService_Send_args() throw();
  TPacket tPacket;

  void __set_tPacket(const TPacket& val);

  bool operator == (const TGmnSwitchService_Send_args & rhs) const
  {
    if (!(tPacket == rhs.tPacket))
      return false;
    return true;
  }
  bool operator != (const TGmnSwitchService_Send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_Send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_Send_args& obj);
};


class TGmnSwitchService_Send_pargs {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};


  virtual ~TGmnSwitchService_Send_pargs() throw();
  const TPacket* tPacket;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_Send_pargs& obj);
};


class TGmnSwitchService_Send_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TGmnSwitchService_Send_result(const TGmnSwitchService_Send_result&);
  TGmnSwitchService_Send_result& operator=(const TGmnSwitchService_Send_result&);
  TGmnSwitchService_Send_result() {
  }

  virtual ~TGmnSwitchService_Send_result() throw();

  bool operator == (const TGmnSwitchService_Send_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGmnSwitchService_Send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_Send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_Send_result& obj);
};


class TGmnSwitchService_Send_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TGmnSwitchService_Send_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_Send_presult& obj);
};


class TGmnSwitchService_AddNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "0F79E80EC0EF5F516A36D6E6282D4F3F";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0x79,0xE8,0x0E,0xC0,0xEF,0x5F,0x51,0x6A,0x36,0xD6,0xE6,0x28,0x2D,0x4F,0x3F};

  TGmnSwitchService_AddNamespace_args(const TGmnSwitchService_AddNamespace_args&);
  TGmnSwitchService_AddNamespace_args& operator=(const TGmnSwitchService_AddNamespace_args&);
  TGmnSwitchService_AddNamespace_args() {
  }

  virtual ~TGmnSwitchService_AddNamespace_args() throw();
  TNamespace tNamespace;

  void __set_tNamespace(const TNamespace& val);

  bool operator == (const TGmnSwitchService_AddNamespace_args & rhs) const
  {
    if (!(tNamespace == rhs.tNamespace))
      return false;
    return true;
  }
  bool operator != (const TGmnSwitchService_AddNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_AddNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_AddNamespace_args& obj);
};


class TGmnSwitchService_AddNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "0F79E80EC0EF5F516A36D6E6282D4F3F";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0x79,0xE8,0x0E,0xC0,0xEF,0x5F,0x51,0x6A,0x36,0xD6,0xE6,0x28,0x2D,0x4F,0x3F};


  virtual ~TGmnSwitchService_AddNamespace_pargs() throw();
  const TNamespace* tNamespace;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_AddNamespace_pargs& obj);
};


class TGmnSwitchService_AddNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TGmnSwitchService_AddNamespace_result(const TGmnSwitchService_AddNamespace_result&);
  TGmnSwitchService_AddNamespace_result& operator=(const TGmnSwitchService_AddNamespace_result&);
  TGmnSwitchService_AddNamespace_result() {
  }

  virtual ~TGmnSwitchService_AddNamespace_result() throw();

  bool operator == (const TGmnSwitchService_AddNamespace_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGmnSwitchService_AddNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_AddNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_AddNamespace_result& obj);
};


class TGmnSwitchService_AddNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TGmnSwitchService_AddNamespace_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_AddNamespace_presult& obj);
};


class TGmnSwitchService_UpdateNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "C98AC04253830E3A074C9958DFBCBF3B";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x8A,0xC0,0x42,0x53,0x83,0x0E,0x3A,0x07,0x4C,0x99,0x58,0xDF,0xBC,0xBF,0x3B};

  TGmnSwitchService_UpdateNamespace_args(const TGmnSwitchService_UpdateNamespace_args&);
  TGmnSwitchService_UpdateNamespace_args& operator=(const TGmnSwitchService_UpdateNamespace_args&);
  TGmnSwitchService_UpdateNamespace_args() {
  }

  virtual ~TGmnSwitchService_UpdateNamespace_args() throw();
  std::vector<TNamespace>  tNamespaceList;

  void __set_tNamespaceList(const std::vector<TNamespace> & val);

  bool operator == (const TGmnSwitchService_UpdateNamespace_args & rhs) const
  {
    if (!(tNamespaceList == rhs.tNamespaceList))
      return false;
    return true;
  }
  bool operator != (const TGmnSwitchService_UpdateNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_UpdateNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_UpdateNamespace_args& obj);
};


class TGmnSwitchService_UpdateNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "C98AC04253830E3A074C9958DFBCBF3B";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x8A,0xC0,0x42,0x53,0x83,0x0E,0x3A,0x07,0x4C,0x99,0x58,0xDF,0xBC,0xBF,0x3B};


  virtual ~TGmnSwitchService_UpdateNamespace_pargs() throw();
  const std::vector<TNamespace> * tNamespaceList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_UpdateNamespace_pargs& obj);
};


class TGmnSwitchService_UpdateNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TGmnSwitchService_UpdateNamespace_result(const TGmnSwitchService_UpdateNamespace_result&);
  TGmnSwitchService_UpdateNamespace_result& operator=(const TGmnSwitchService_UpdateNamespace_result&);
  TGmnSwitchService_UpdateNamespace_result() {
  }

  virtual ~TGmnSwitchService_UpdateNamespace_result() throw();

  bool operator == (const TGmnSwitchService_UpdateNamespace_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGmnSwitchService_UpdateNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_UpdateNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_UpdateNamespace_result& obj);
};


class TGmnSwitchService_UpdateNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TGmnSwitchService_UpdateNamespace_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_UpdateNamespace_presult& obj);
};


class TGmnSwitchService_ListNamespace_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TGmnSwitchService_ListNamespace_args(const TGmnSwitchService_ListNamespace_args&);
  TGmnSwitchService_ListNamespace_args& operator=(const TGmnSwitchService_ListNamespace_args&);
  TGmnSwitchService_ListNamespace_args() {
  }

  virtual ~TGmnSwitchService_ListNamespace_args() throw();

  bool operator == (const TGmnSwitchService_ListNamespace_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGmnSwitchService_ListNamespace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_ListNamespace_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_ListNamespace_args& obj);
};


class TGmnSwitchService_ListNamespace_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TGmnSwitchService_ListNamespace_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_ListNamespace_pargs& obj);
};

typedef struct _TGmnSwitchService_ListNamespace_result__isset {
  _TGmnSwitchService_ListNamespace_result__isset() : success(false) {}
  bool success :1;
} _TGmnSwitchService_ListNamespace_result__isset;

class TGmnSwitchService_ListNamespace_result {
 public:

  static const char* ascii_fingerprint; // = "9859ED122960361301AD1C3B284843AB";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x59,0xED,0x12,0x29,0x60,0x36,0x13,0x01,0xAD,0x1C,0x3B,0x28,0x48,0x43,0xAB};

  TGmnSwitchService_ListNamespace_result(const TGmnSwitchService_ListNamespace_result&);
  TGmnSwitchService_ListNamespace_result& operator=(const TGmnSwitchService_ListNamespace_result&);
  TGmnSwitchService_ListNamespace_result() {
  }

  virtual ~TGmnSwitchService_ListNamespace_result() throw();
  std::vector<TNamespace>  success;

  _TGmnSwitchService_ListNamespace_result__isset __isset;

  void __set_success(const std::vector<TNamespace> & val);

  bool operator == (const TGmnSwitchService_ListNamespace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TGmnSwitchService_ListNamespace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnSwitchService_ListNamespace_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_ListNamespace_result& obj);
};

typedef struct _TGmnSwitchService_ListNamespace_presult__isset {
  _TGmnSwitchService_ListNamespace_presult__isset() : success(false) {}
  bool success :1;
} _TGmnSwitchService_ListNamespace_presult__isset;

class TGmnSwitchService_ListNamespace_presult {
 public:

  static const char* ascii_fingerprint; // = "9859ED122960361301AD1C3B284843AB";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x59,0xED,0x12,0x29,0x60,0x36,0x13,0x01,0xAD,0x1C,0x3B,0x28,0x48,0x43,0xAB};


  virtual ~TGmnSwitchService_ListNamespace_presult() throw();
  std::vector<TNamespace> * success;

  _TGmnSwitchService_ListNamespace_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TGmnSwitchService_ListNamespace_presult& obj);
};

class TGmnSwitchServiceClient : virtual public TGmnSwitchServiceIf {
 public:
  TGmnSwitchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TGmnSwitchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Send(const TPacket& tPacket);
  void send_Send(const TPacket& tPacket);
  void recv_Send();
  void AddNamespace(const TNamespace& tNamespace);
  void send_AddNamespace(const TNamespace& tNamespace);
  void recv_AddNamespace();
  void UpdateNamespace(const std::vector<TNamespace> & tNamespaceList);
  void send_UpdateNamespace(const std::vector<TNamespace> & tNamespaceList);
  void recv_UpdateNamespace();
  void ListNamespace(std::vector<TNamespace> & _return);
  void send_ListNamespace();
  void recv_ListNamespace(std::vector<TNamespace> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TGmnSwitchServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TGmnSwitchServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TGmnSwitchServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ListNamespace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TGmnSwitchServiceProcessor(boost::shared_ptr<TGmnSwitchServiceIf> iface) :
    iface_(iface) {
    processMap_["Send"] = &TGmnSwitchServiceProcessor::process_Send;
    processMap_["AddNamespace"] = &TGmnSwitchServiceProcessor::process_AddNamespace;
    processMap_["UpdateNamespace"] = &TGmnSwitchServiceProcessor::process_UpdateNamespace;
    processMap_["ListNamespace"] = &TGmnSwitchServiceProcessor::process_ListNamespace;
  }

  virtual ~TGmnSwitchServiceProcessor() {}
};

class TGmnSwitchServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TGmnSwitchServiceProcessorFactory(const ::boost::shared_ptr< TGmnSwitchServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TGmnSwitchServiceIfFactory > handlerFactory_;
};

class TGmnSwitchServiceMultiface : virtual public TGmnSwitchServiceIf {
 public:
  TGmnSwitchServiceMultiface(std::vector<boost::shared_ptr<TGmnSwitchServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TGmnSwitchServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TGmnSwitchServiceIf> > ifaces_;
  TGmnSwitchServiceMultiface() {}
  void add(boost::shared_ptr<TGmnSwitchServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Send(const TPacket& tPacket) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Send(tPacket);
    }
    ifaces_[i]->Send(tPacket);
  }

  void AddNamespace(const TNamespace& tNamespace) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddNamespace(tNamespace);
    }
    ifaces_[i]->AddNamespace(tNamespace);
  }

  void UpdateNamespace(const std::vector<TNamespace> & tNamespaceList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateNamespace(tNamespaceList);
    }
    ifaces_[i]->UpdateNamespace(tNamespaceList);
  }

  void ListNamespace(std::vector<TNamespace> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ListNamespace(_return);
    }
    ifaces_[i]->ListNamespace(_return);
    return;
  }

};

} // namespace

#endif
