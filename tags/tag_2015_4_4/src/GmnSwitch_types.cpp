/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GmnSwitch_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace gmnswitch {


TPacket::~TPacket() throw() {
}


void TPacket::__set_SrcName(const std::string& val) {
  this->SrcName = val;
}

void TPacket::__set_DesName(const std::string& val) {
  this->DesName = val;
}

void TPacket::__set_Payload(const std::string& val) {
  this->Payload = val;
}

const char* TPacket::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t TPacket::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t TPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_SrcName = false;
  bool isset_DesName = false;
  bool isset_Payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SrcName);
          isset_SrcName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DesName);
          isset_DesName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->Payload);
          isset_Payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_SrcName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_DesName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TPacket");

  xfer += oprot->writeFieldBegin("SrcName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->SrcName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DesName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->DesName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Payload", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->Payload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TPacket &a, TPacket &b) {
  using ::std::swap;
  swap(a.SrcName, b.SrcName);
  swap(a.DesName, b.DesName);
  swap(a.Payload, b.Payload);
}

TPacket::TPacket(const TPacket& other0) {
  SrcName = other0.SrcName;
  DesName = other0.DesName;
  Payload = other0.Payload;
}
TPacket& TPacket::operator=(const TPacket& other1) {
  SrcName = other1.SrcName;
  DesName = other1.DesName;
  Payload = other1.Payload;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TPacket& obj) {
  using apache::thrift::to_string;
  out << "TPacket(";
  out << "SrcName=" << to_string(obj.SrcName);
  out << ", " << "DesName=" << to_string(obj.DesName);
  out << ", " << "Payload=" << to_string(obj.Payload);
  out << ")";
  return out;
}


TEntity::~TEntity() throw() {
}


void TEntity::__set_Name(const std::string& val) {
  this->Name = val;
}

void TEntity::__set_Value(const std::string& val) {
  this->Value = val;
}

void TEntity::__set_State(const std::string& val) {
  this->State = val;
}

void TEntity::__set_Action(const std::vector<std::string> & val) {
  this->Action = val;
}

const char* TEntity::ascii_fingerprint = "D5082811F603CA229965DA45DAFDD5B7";
const uint8_t TEntity::binary_fingerprint[16] = {0xD5,0x08,0x28,0x11,0xF6,0x03,0xCA,0x22,0x99,0x65,0xDA,0x45,0xDA,0xFD,0xD5,0xB7};

uint32_t TEntity::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Name = false;
  bool isset_Value = false;
  bool isset_State = false;
  bool isset_Action = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          isset_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          isset_Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->State);
          isset_State = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Action.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->Action.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->Action[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          isset_Action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_State)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Action)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TEntity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TEntity");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("State", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->State);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Action", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->Action.size()));
    std::vector<std::string> ::const_iterator _iter7;
    for (_iter7 = this->Action.begin(); _iter7 != this->Action.end(); ++_iter7)
    {
      xfer += oprot->writeString((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TEntity &a, TEntity &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Value, b.Value);
  swap(a.State, b.State);
  swap(a.Action, b.Action);
}

TEntity::TEntity(const TEntity& other8) {
  Name = other8.Name;
  Value = other8.Value;
  State = other8.State;
  Action = other8.Action;
}
TEntity& TEntity::operator=(const TEntity& other9) {
  Name = other9.Name;
  Value = other9.Value;
  State = other9.State;
  Action = other9.Action;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TEntity& obj) {
  using apache::thrift::to_string;
  out << "TEntity(";
  out << "Name=" << to_string(obj.Name);
  out << ", " << "Value=" << to_string(obj.Value);
  out << ", " << "State=" << to_string(obj.State);
  out << ", " << "Action=" << to_string(obj.Action);
  out << ")";
  return out;
}


TNamespace::~TNamespace() throw() {
}


void TNamespace::__set_Name(const std::string& val) {
  this->Name = val;
}

void TNamespace::__set_Tag(const std::string& val) {
  this->Tag = val;
}

void TNamespace::__set_Policy(const std::vector<std::string> & val) {
  this->Policy = val;
}

void TNamespace::__set_Entity(const std::vector<TEntity> & val) {
  this->Entity = val;
}

const char* TNamespace::ascii_fingerprint = "07ABF3BA30AB1925817284CC0A64AA2A";
const uint8_t TNamespace::binary_fingerprint[16] = {0x07,0xAB,0xF3,0xBA,0x30,0xAB,0x19,0x25,0x81,0x72,0x84,0xCC,0x0A,0x64,0xAA,0x2A};

uint32_t TNamespace::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Name = false;
  bool isset_Tag = false;
  bool isset_Policy = false;
  bool isset_Entity = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          isset_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Tag);
          isset_Tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Policy.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->Policy.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readString(this->Policy[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          isset_Policy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Entity.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->Entity.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += this->Entity[_i19].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_Entity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Tag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Policy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Entity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TNamespace::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TNamespace");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Tag", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Policy", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->Policy.size()));
    std::vector<std::string> ::const_iterator _iter20;
    for (_iter20 = this->Policy.begin(); _iter20 != this->Policy.end(); ++_iter20)
    {
      xfer += oprot->writeString((*_iter20));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Entity", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Entity.size()));
    std::vector<TEntity> ::const_iterator _iter21;
    for (_iter21 = this->Entity.begin(); _iter21 != this->Entity.end(); ++_iter21)
    {
      xfer += (*_iter21).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TNamespace &a, TNamespace &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Tag, b.Tag);
  swap(a.Policy, b.Policy);
  swap(a.Entity, b.Entity);
}

TNamespace::TNamespace(const TNamespace& other22) {
  Name = other22.Name;
  Tag = other22.Tag;
  Policy = other22.Policy;
  Entity = other22.Entity;
}
TNamespace& TNamespace::operator=(const TNamespace& other23) {
  Name = other23.Name;
  Tag = other23.Tag;
  Policy = other23.Policy;
  Entity = other23.Entity;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TNamespace& obj) {
  using apache::thrift::to_string;
  out << "TNamespace(";
  out << "Name=" << to_string(obj.Name);
  out << ", " << "Tag=" << to_string(obj.Tag);
  out << ", " << "Policy=" << to_string(obj.Policy);
  out << ", " << "Entity=" << to_string(obj.Entity);
  out << ")";
  return out;
}

} // namespace
