/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GmnSwitch_TYPES_H
#define GmnSwitch_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace gmnswitch {

class TPacket;

class TEntity;

class TNamespace;


class TPacket {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  TPacket(const TPacket&);
  TPacket& operator=(const TPacket&);
  TPacket() : SrcName(), DesName(), Payload() {
  }

  virtual ~TPacket() throw();
  std::string SrcName;
  std::string DesName;
  std::string Payload;

  void __set_SrcName(const std::string& val);

  void __set_DesName(const std::string& val);

  void __set_Payload(const std::string& val);

  bool operator == (const TPacket & rhs) const
  {
    if (!(SrcName == rhs.SrcName))
      return false;
    if (!(DesName == rhs.DesName))
      return false;
    if (!(Payload == rhs.Payload))
      return false;
    return true;
  }
  bool operator != (const TPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TPacket& obj);
};

void swap(TPacket &a, TPacket &b);


class TEntity {
 public:

  static const char* ascii_fingerprint; // = "D5082811F603CA229965DA45DAFDD5B7";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x08,0x28,0x11,0xF6,0x03,0xCA,0x22,0x99,0x65,0xDA,0x45,0xDA,0xFD,0xD5,0xB7};

  TEntity(const TEntity&);
  TEntity& operator=(const TEntity&);
  TEntity() : Name(), Value(), State() {
  }

  virtual ~TEntity() throw();
  std::string Name;
  std::string Value;
  std::string State;
  std::vector<std::string>  Action;

  void __set_Name(const std::string& val);

  void __set_Value(const std::string& val);

  void __set_State(const std::string& val);

  void __set_Action(const std::vector<std::string> & val);

  bool operator == (const TEntity & rhs) const
  {
    if (!(Name == rhs.Name))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(State == rhs.State))
      return false;
    if (!(Action == rhs.Action))
      return false;
    return true;
  }
  bool operator != (const TEntity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TEntity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TEntity& obj);
};

void swap(TEntity &a, TEntity &b);


class TNamespace {
 public:

  static const char* ascii_fingerprint; // = "07ABF3BA30AB1925817284CC0A64AA2A";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xAB,0xF3,0xBA,0x30,0xAB,0x19,0x25,0x81,0x72,0x84,0xCC,0x0A,0x64,0xAA,0x2A};

  TNamespace(const TNamespace&);
  TNamespace& operator=(const TNamespace&);
  TNamespace() : Name(), Tag() {
  }

  virtual ~TNamespace() throw();

  std::string Name;
  std::string Tag;
  std::vector<std::string>  Policy;
  std::vector<TEntity>  Entity;

  void __set_Name(const std::string& val);

  void __set_Tag(const std::string& val);

  void __set_Policy(const std::vector<std::string> & val);

  void __set_Entity(const std::vector<TEntity> & val);

  bool operator == (const TNamespace & rhs) const
  {
    if (!(Name == rhs.Name))
      return false;
    if (!(Tag == rhs.Tag))
      return false;
    if (!(Policy == rhs.Policy))
      return false;
    if (!(Entity == rhs.Entity))
      return false;
    return true;
  }
  bool operator != (const TNamespace &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNamespace & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TNamespace& obj);
};

void swap(TNamespace &a, TNamespace &b);

} // namespace

#endif
