/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TGmnClientService_H
#define TGmnClientService_H

#include <thrift/TDispatchProcessor.h>
#include "GmnClient_types.h"

namespace gmnclient {

class TGmnClientServiceIf {
 public:
  virtual ~TGmnClientServiceIf() {}

  /**
   * Send the TClientPacket to Switch
   * 
   * @param tClientPacket
   */
  virtual void Send(const TClientPacket& tClientPacket) = 0;
};

class TGmnClientServiceIfFactory {
 public:
  typedef TGmnClientServiceIf Handler;

  virtual ~TGmnClientServiceIfFactory() {}

  virtual TGmnClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TGmnClientServiceIf* /* handler */) = 0;
};

class TGmnClientServiceIfSingletonFactory : virtual public TGmnClientServiceIfFactory {
 public:
  TGmnClientServiceIfSingletonFactory(const boost::shared_ptr<TGmnClientServiceIf>& iface) : iface_(iface) {}
  virtual ~TGmnClientServiceIfSingletonFactory() {}

  virtual TGmnClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TGmnClientServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TGmnClientServiceIf> iface_;
};

class TGmnClientServiceNull : virtual public TGmnClientServiceIf {
 public:
  virtual ~TGmnClientServiceNull() {}
  void Send(const TClientPacket& /* tClientPacket */) {
    return;
  }
};


class TGmnClientService_Send_args {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};

  TGmnClientService_Send_args(const TGmnClientService_Send_args&);
  TGmnClientService_Send_args& operator=(const TGmnClientService_Send_args&);
  TGmnClientService_Send_args() {
  }

  virtual ~TGmnClientService_Send_args() throw();
  TClientPacket tClientPacket;

  void __set_tClientPacket(const TClientPacket& val);

  bool operator == (const TGmnClientService_Send_args & rhs) const
  {
    if (!(tClientPacket == rhs.tClientPacket))
      return false;
    return true;
  }
  bool operator != (const TGmnClientService_Send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnClientService_Send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnClientService_Send_args& obj);
};


class TGmnClientService_Send_pargs {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};


  virtual ~TGmnClientService_Send_pargs() throw();
  const TClientPacket* tClientPacket;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnClientService_Send_pargs& obj);
};


class TGmnClientService_Send_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TGmnClientService_Send_result(const TGmnClientService_Send_result&);
  TGmnClientService_Send_result& operator=(const TGmnClientService_Send_result&);
  TGmnClientService_Send_result() {
  }

  virtual ~TGmnClientService_Send_result() throw();

  bool operator == (const TGmnClientService_Send_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGmnClientService_Send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGmnClientService_Send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGmnClientService_Send_result& obj);
};


class TGmnClientService_Send_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TGmnClientService_Send_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TGmnClientService_Send_presult& obj);
};

class TGmnClientServiceClient : virtual public TGmnClientServiceIf
{
 public:
  TGmnClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot)
  {
    setProtocol(prot);
  }
  TGmnClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) 
  {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot)
  {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) 
  {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() 
  {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol()
  {
    return poprot_;
  }
  void Send(const TClientPacket& tClientPacket);
  void send_Send(const TClientPacket& tClientPacket);
  void recv_Send();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TGmnClientServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TGmnClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TGmnClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TGmnClientServiceProcessor(boost::shared_ptr<TGmnClientServiceIf> iface) :
    iface_(iface) {
    processMap_["Send"] = &TGmnClientServiceProcessor::process_Send;
  }

  virtual ~TGmnClientServiceProcessor() {}
};

class TGmnClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TGmnClientServiceProcessorFactory(const ::boost::shared_ptr< TGmnClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TGmnClientServiceIfFactory > handlerFactory_;
};

class TGmnClientServiceMultiface : virtual public TGmnClientServiceIf {
 public:
  TGmnClientServiceMultiface(std::vector<boost::shared_ptr<TGmnClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TGmnClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TGmnClientServiceIf> > ifaces_;
  TGmnClientServiceMultiface() {}
  void add(boost::shared_ptr<TGmnClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Send(const TClientPacket& tClientPacket) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Send(tClientPacket);
    }
    ifaces_[i]->Send(tClientPacket);
  }

};

} // namespace

#endif
