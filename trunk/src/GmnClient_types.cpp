/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GmnClient_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace gmnclient {


TClientPacket::~TClientPacket() throw() {
}


void TClientPacket::__set_SrcName(const std::string& val) {
  this->SrcName = val;
}

void TClientPacket::__set_DesName(const std::string& val) {
  this->DesName = val;
}

void TClientPacket::__set_Payload(const std::string& val) {
  this->Payload = val;
}

const char* TClientPacket::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t TClientPacket::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t TClientPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_SrcName = false;
  bool isset_DesName = false;
  bool isset_Payload = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SrcName);
          isset_SrcName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DesName);
          isset_DesName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->Payload);
          isset_Payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_SrcName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_DesName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Payload)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TClientPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TClientPacket");

  xfer += oprot->writeFieldBegin("SrcName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->SrcName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DesName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->DesName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Payload", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->Payload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TClientPacket &a, TClientPacket &b) {
  using ::std::swap;
  swap(a.SrcName, b.SrcName);
  swap(a.DesName, b.DesName);
  swap(a.Payload, b.Payload);
}

TClientPacket::TClientPacket(const TClientPacket& other0) {
  SrcName = other0.SrcName;
  DesName = other0.DesName;
  Payload = other0.Payload;
}
TClientPacket& TClientPacket::operator=(const TClientPacket& other1) {
  SrcName = other1.SrcName;
  DesName = other1.DesName;
  Payload = other1.Payload;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TClientPacket& obj) {
  using apache::thrift::to_string;
  out << "TClientPacket(";
  out << "SrcName=" << to_string(obj.SrcName);
  out << ", " << "DesName=" << to_string(obj.DesName);
  out << ", " << "Payload=" << to_string(obj.Payload);
  out << ")";
  return out;
}

} // namespace
